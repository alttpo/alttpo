trigger:
  branches:
    include:
      - '*'

jobs:
  - job: "Build"
    pool:
      vmImage: 'ubuntu-22.04'

    variables:
      GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
      modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code
      isStable: $[eq(variables['Build.SourceBranch'], 'refs/heads/stable')]
      isUnstable: $[eq(variables['Build.SourceBranch'], 'refs/heads/unstable')]
      ${{ if or( eq(variables['Build.SourceBranch'],'refs/heads/stable'), eq(variables['Build.SourceBranch'],'refs/heads/unstable') ) }}:
        bsnesBranch: ${{ variables['Build.SourceBranch'] }}
      ${{ if not( or( eq(variables['Build.SourceBranch'],'refs/heads/stable'), eq(variables['Build.SourceBranch'],'refs/heads/unstable') ) ) }}:
        bsnesBranch: 'refs/heads/unstable'

    strategy:
      matrix:

        win64:
          archName: 'win64'
          GOOS: 'windows'
          GOARCH: 'amd64'

        win32:
          archName: 'win32'
          GOOS: 'windows'
          GOARCH: '386'

        macOS:
          archName: 'macOS'
          GOOS: 'darwin'
          GOARCH: 'amd64'

        linux:
          archName: 'linux'
          GOOS: 'linux'
          GOARCH: 'amd64'

    steps:
    - task: GoTool@0
      inputs:
        version: '1.13'
      displayName: 'Install Go'

    - script: |
        mkdir -p '$(GOBIN)'
        mkdir -p '$(GOPATH)/pkg'
        mkdir -p '$(modulePath)'
        shopt -s extglob
        shopt -s dotglob
        mv !(gopath) '$(modulePath)'
        echo '##vso[task.prependpath]$(GOBIN)'
        echo '##vso[task.prependpath]$(GOROOT)/bin'
      displayName: 'Set up the Go workspace'

    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'specific'
        project: 'ed1875fa-87ea-4872-9756-9a91c67a8c6e'
        definition: '3'
        buildVersionToDownload: 'latestFromBranch'
        branchName: '$(bsnesBranch)'
        targetPath: '$(modulePath)'
      displayName: 'Download bsnes-angelscript $(bsnesBranch)'

    - script: |
        echo 'Package'
        set -e

        # expand the wildcard to find the folder name:
        bsnes_nightly=( $(compgen -W "bsnes-as-$(archName)-*") )
        echo "Determined bsnes_nightly=${bsnes_nightly[0]}"

        # determine our own commit:
        alttpo_commit=$(Build.SourceVersion)
        echo "Determined alttpo_commit=${alttpo_commit}"

        # find our nightly folder name:
        alttpo_nightly=alttpo-client-$(archName)-$(Build.SourceBranchName)-$(Build.BuildNumber)
        echo "Determined alttpo_nightly=${alttpo_nightly}"

        # rename the bsnes folder:
        mv ${bsnes_nightly} ${alttpo_nightly}

        # package alttpo folder:
        mkdir ${alttpo_nightly}/alttpo
        cp -a alttpo/*.as ${alttpo_nightly}/alttpo/
        cp -a alttpo/*.png ${alttpo_nightly}/alttpo/
        cp -a alttpo/*.bml ${alttpo_nightly}/alttpo/

        cp -a README.md ${alttpo_nightly}/
        cp -a static ${alttpo_nightly}/

        # output variable for the nightly build path:
        echo "##vso[task.setvariable variable=alttpo_nightly]${alttpo_nightly}"
      workingDirectory: '$(modulePath)'
      displayName: 'Package alttpo-nightly'

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(modulePath)/$(alttpo_nightly)'
        artifact: '$(alttpo_nightly)'
        publishLocation: 'pipeline'
      displayName: 'Publish alttpo-nightly'

    - script: |
        go version
        go get -v -t -d ./...
        GOOS='$(GOOS)' GOARCH='$(GOARCH)' go build -v .
      workingDirectory: '$(modulePath)/alttp-server'
      displayName: 'Build alttp-server'

    - script: |
        # determine our own commit:
        alttpo_commit=$(Build.SourceVersion)
        echo "Determined alttpo_commit=${alttpo_commit}"

        # find our nightly folder name:
        alttpo_server_nightly=alttpo-server-$(archName)-$(Build.SourceBranchName)-$(Build.BuildNumber)
        echo "Determined alttpo_server_nightly=${alttpo_server_nightly}"

        # package up server binary:
        mkdir ${alttpo_server_nightly}
        mv alttp-server/alttp-server* ${alttpo_server_nightly}/

        # output variable for the nightly build path:
        echo "##vso[task.setvariable variable=alttpo_server_nightly]${alttpo_server_nightly}"
      workingDirectory: '$(modulePath)/'
      displayName: 'Package alttp-server'

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(modulePath)/$(alttpo_server_nightly)'
        artifact: '$(alttpo_server_nightly)'
        publishLocation: 'pipeline'
      displayName: 'Publish alttp-server'

  - job: "Discord"
    dependsOn: "Build"
    condition: succeeded()

    pool: server
    steps:
      # Post a link to latest build artifacts on success to #stable channel in Discord:
      - task: InvokeRESTAPI@1
        inputs:
          connectionType: 'connectedServiceName'
          serviceConnection: 'stable-webhook'
          method: 'POST'
          body: |
            {
                "content": "A new stable build `$(Build.BuildNumber)` from the `$(Build.SourceBranchName)` branch is available! Download it here:\nhttps://dev.azure.com/ALttPO/alttpo/_build/results?buildId=$(Build.BuildId)&view=artifacts&type=publishedArtifacts\n\nBuild notes:\n$(Build.SourceVersionMessage)"
            }
          headers: |
            {
              "Content-Type": "application/json"
            }
          waitForCompletion: 'false'
        condition: eq(variables['Build.SourceBranchName'], 'stable')
        displayName: "Discord: post link to #stable channel"

      # Post a link to latest build artifacts on success to #stable channel in Discord:
      - task: InvokeRESTAPI@1
        inputs:
          connectionType: 'connectedServiceName'
          serviceConnection: 'unstable-webhook'
          method: 'POST'
          body: |
            {
                "content": "A new unstable build `$(Build.BuildNumber)` from the `$(Build.SourceBranchName)` branch is available! Download it here:\nhttps://dev.azure.com/ALttPO/alttpo/_build/results?buildId=$(Build.BuildId)&view=artifacts&type=publishedArtifacts\n\nBuild notes:\n$(Build.SourceVersionMessage)"
            }
          headers: |
            {
              "Content-Type": "application/json"
            }
          waitForCompletion: 'false'
        condition: eq(variables['Build.SourceBranchName'], 'unstable')
        displayName: "Discord: post link to #unstable channel"
